<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace는 DAO 인터페이스의 풀 패키지 경로와 동일하게 설정합니다. -->
<mapper namespace="com.Semicolon.org.dao.MemberDAO">

    <!--
    id는 DAO 인터페이스의 메서드 이름과 동일해야 합니다.
    resultType은 쿼리 결과를 매핑할 DTO 클래스의 풀 패키지 경로를 지정합니다.
    -->
    <resultMap id="memberResultMap" type="com.Semicolon.org.dto.MemberDTO">
        <id column="ENGID" property="engId"/>
        <result column="USERID" property="userId"/>
        <result column="GITHUBADDRESS" property="gitHubAddress"/>
        <result column="MAJOR" property="major"/>
        <result column="CAREER" property="career"/>
        <result column="HISTORYPROJECT" property="historyProject"/>
        <result column="ORID" property="orId"/>
        <result column="MEMBER_ROLE" property="memberRole"/>
    </resultMap>

    <!-- 1. engId를 기준으로 특정 회원의 상세 정보를 조회하는 쿼리 -->
    <select id="getMemberById" resultMap="memberResultMap">
        SELECT
            ENGID,
            USERID,
            GITHUBADDRESS,
            MAJOR,
            CAREER,
            HISTORYPROJECT,
            ORID,
            MEMBER_ROLE
        FROM
            ENGINEER
        WHERE
            ENGID = #{engId}
    </select>

    <!-- 2. engId를 기준으로 특정 회원을 삭제하는 쿼리 -->
    <delete id="deleteMember">
        DELETE FROM ENGINEER
        WHERE ENGID = #{engId}
    </delete>

    <!-- 3. 특정 회원의 권한을 변경하는 쿼리 -->
    <!--
    @Param 어노테이션을 사용하여 DAO 메서드의 인자 이름을 직접 지정했으므로,
    Mapper.xml에서는 그 이름(engId, newRole)을 그대로 사용합니다.
    -->
    <update id="updateMemberRole">
        UPDATE ENGINEER
        SET
            MEMBER_ROLE = #{newRole}
        WHERE
            ENGID = #{engId}
    </update>

    <!-- 4. 다양한 필터 조건을 적용하여 회원 목록을 검색하는 쿼리 -->
    <!--
    <where>와 <if> 태그를 사용하여 SQL 쿼리를 동적으로 생성합니다.
    Map에 어떤 키-값 쌍이 들어오는지에 따라 WHERE 절이 유연하게 바뀝니다.
    -->
    <select id="searchMembersByFilter" parameterType="java.util.Map" resultMap="memberResultMap">
        SELECT
            ENGID,
            USERID,
            GITHUBADDRESS,
            MAJOR,
            CAREER,
            HISTORYPROJECT,
            ORID,
            MEMBER_ROLE
        FROM
            ENGINEER
        <where>
            <if test="major != null and major != ''">
                AND MAJOR = #{major}
            </if>
            <if test="career != null and career != ''">
                AND CAREER = #{career}
            </if>
            <if test="orId != null and orId != ''">
                AND ORID = #{orId}
            </if>
        </where>
    </select>

</mapper>
